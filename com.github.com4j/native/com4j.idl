/*
	The easiest way to go between the native code and com4j runtime
	is by using COM interfaces, because com4j provides that functionality.

	We don't actually register those interfaces and classes, but
	defining the interfaces via IDL would allow us to use tlbimp to
	use itself to build itself.

  
 * Original auther  (C) Kohsuke Kawaguchi (kk@kohsuke.org)
 * Modified by      (C) Michael Schnell (scm, 2008, Michael-Schnell@gmx.de)
*/



import "oaidl.idl";
import "ocidl.idl";


[
	uuid(AEDD2B06-81EF-499d-A9D6-E32B3188B61A),
	version(1.0),
	helpstring("com4j type library")
]
library com4j
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");


	interface IType;
	interface ITypeDecl;
	interface IInterfaceDecl;
	interface IMethod;
	interface IParam;
	interface IConstant;
	interface IProperty;
	interface IImplementedInterfaceDecl;

	typedef enum {
		[helpstring("testing")]
		TypeKind_ENUM	= 0,
		TypeKind_RECORD	= 1,
		TypeKind_MODULE	= 2,
		TypeKind_INTERFACE	= 3,
		TypeKind_DISPATCH	= 4,
		TypeKind_COCLASS	= 5,
		TypeKind_ALIAS	= 6,
		TypeKind_UNION	= 7,
		TypeKind_MAX	= 8
	} TypeKind;

	[
		object,
		uuid(2CC69AC1-D228-401b-83D9-7A7C42E5DBD9),
		helpstring("Information about a type library"),
		pointer_default(unique)
	]
	interface ITypeLibrary : IUnknown
	{
		[helpstring("gets the number of types in this library")]
		HRESULT getCount([out,retval] int* pCount);
		
		[helpstring("gets the GUID of this type library")]
		HRESULT getLibid([out,retval] GUID* pValue);
		
		HRESULT getName([out,retval] BSTR* pName);

		HRESULT getHelpString([out,retval] BSTR* pHelpString);

		[helpstring("gets the type in this library")]
		HRESULT getTypeDecl(int nIndex, [out, retval] ITypeDecl** ppType);
	};

	[
		object,
		uuid(ED0810B4-3662-4fe7-8FA7-446C465B2847),
		helpstring("type"),
		pointer_default(unique)
	]
	interface IType : IUnknown {
	};

	[
		object,
		uuid(EB8F889F-8944-4faf-80F2-6C2457C224C4),
		helpstring("pointer type"),
		pointer_default(unique)
	]
	interface IPtrType : IType {
		[helpstring("'T' of 'T*'")]
		HRESULT getPointedAtType( [out,retval] IType** ppType );
	};

	[
		object,
		uuid(255C24C4-225E-4bd7-B699-A5B852C43919),
		helpstring("safe array type"),
		pointer_default(unique)
	]
	interface ISafeArrayType : IType {
		[helpstring("'T' of 'T[]'")]
		HRESULT getComponentType( [out,retval] IType** ppType );
	};


	[
		object,
		uuid(BA8E1931-1249-4863-A436-332FA88F645B),
		helpstring("primitive data type. singletons"),
		pointer_default(unique)
	]
	interface IPrimitiveType : IType {
		[helpstring("human readable name of this primitive type")]
		HRESULT getName( [out,retval] BSTR* pName);

		[helpstring("code that uniquely identifies the primitive type")]
		HRESULT getVarType( [out,retval] VARTYPE* pOut );
	};

	[
		object,
		uuid(AF7CC95D-EC5C-4904-B2ED-E1E8838A4377),
		helpstring("type declared in this type library"),
		pointer_default(unique)
	]
	interface ITypeDecl : IType
	{
		HRESULT getName([out,retval] BSTR* pName);
		HRESULT getHelpString([out,retval] BSTR* pHelpString);
		HRESULT getKind([out,retval] TypeKind* kind);
		HRESULT getParent([out,retval] ITypeLibrary** ppParent );
	};

	[
		object,
		uuid(1FA456D6-6E48-4ff0-9BF8-300937470A02),
		helpstring("Typedef declaration"),
		pointer_default(unique)
	]
	interface ITypedefDecl : ITypeDecl
	{
		[helpstring("get the definition of this typedef")]
		HRESULT getDefinition( [out,retval] IType** ppType );
	};



  
	[
		object,
		uuid(FEADAF50-8751-4a12-87D6-B0EAA190C299),
		helpstring("Generic interface, base interface of a custom interface and a dispatch interface."),
		pointer_default(unique)
	]
	interface IInterface : ITypeDecl
	{
		[helpstring("gets the GUID of this type")]
		HRESULT getGUID([out,retval] GUID* pValue);

		[helpstring("number of methods on this interface")]
		HRESULT countMethods([out,retval] int* pValue);

		[helpstring("method")]
		HRESULT getMethod([in] int index, [out,retval] IMethod** ppMethod );

    [helpstring("number of properties on this interface")]
		HRESULT countProperties([out,retval] int* pValue);

		[helpstring("property")]
		HRESULT getProperty([in] int index, [out,retval] IProperty** ppProperty);

 		[helpstring("return true if this interface is a dual interface")]
		HRESULT isDual([out,retval]VARIANT_BOOL* pOut);

	};


	[
		object,
		uuid(3BDCCFBF-B493-4d54-B1D0-4DE2FB1AFC78),
		helpstring("Dispinterface. ITypeDecl can be casted to this when its kind is TypeKind_DISPATCH"),
		pointer_default(unique)
	]
	interface IDispInterfaceDecl : IInterface
	{	
		[helpstring("get the vtable interface of this dispatch interface. Works only when this is a dual interface.")]
		HRESULT getVtblInterface([out,retval] IInterfaceDecl** ppInterface );
	};

	[
		object,
		uuid(EE076FF5-2E16-4a23-AE24-5DF610F6006E),
		helpstring("VTBL Interface. ITypeDecl can be casted to this when its kind is TypeKind_DISPATCH"),
		pointer_default(unique)
	]
	interface IInterfaceDecl : IInterface
	{
    [helpstring("Returns the IDispatch interface. Only for dual interfaces.")]
    HRESULT getDispInterface([out, retval] IDispInterfaceDecl** ppInterface );

		[helpstring("count the number of the base interfaces")]
		HRESULT countBaseInterfaces([out,retval] int* pValue);

		[helpstring("gets the base interface")]
		HRESULT getBaseInterface(int index, [out,retval] ITypeDecl** ppType );
	};

	[
		object,
		uuid(7BF089F3-5C19-45f8-B95A-90D762580914),
		helpstring("Method on a COM interface"),
		pointer_default(unique)
	]
	interface IMethod : IUnknown
	{
		[helpstring("name of the method")]
		HRESULT getName([out,retval] BSTR* pName);
		HRESULT getKind([out,retval] INVOKEKIND* pKind);
		HRESULT getHelpString([out,retval] BSTR* pHelpString);
		HRESULT getReturnType([out,retval] IType** ppType);
		HRESULT getParamCount([out,retval] int* pOut);
		HRESULT getParam([in] int index, [out,retval] IParam** pOut);

		[helpstring("the method's offset in the virtual table.")]
		HRESULT getVtableIndex([out,retval]int* pOut);

		[helpstring("returns true if this method is vararg. If true, the last parameter is always SAFEARRAY.")]
		HRESULT isVarArg([out,retval]VARIANT_BOOL* pOut);

		HRESULT getDispId([out,retval]int* pDispId);
		HRESULT getFlags([out,retval]int* pflags);
	};

  [
    object,
    uuid(5B18BA32-4A44-4a45-A80B-59631299A7EA),
    helpstring(""),
    pointer_default(unique)
  ]
  interface IProperty : IUnknown
  {
    [helpstring("Name of the property")]
 		HRESULT getName([out,retval] BSTR* pName);
		HRESULT getHelpString([out,retval] BSTR* pHelpString);
    HRESULT getType([out,retval] IType** ppType);
		//[helpstring("the method's offset in the virtual table.")]
		//HRESULT getVtableIndex([out,retval]int* pOut);
		HRESULT getDispId([out,retval]int* pDispId);
  }

	[
		object,
		uuid(8082BEBE-CC6C-44ee-BDF3-0A9BD5B2107B),
		helpstring("A method parameter"),
		pointer_default(unique)
	]
	interface IParam : IUnknown
	{
		[helpstring("name of the parameter. Null when the parameter is the value for the PROPSET method.")]
		HRESULT getName([out,retval] BSTR* pName);
		HRESULT getType([out,retval] IType** ppType);

		HRESULT isIn([out,retval]VARIANT_BOOL* pValue);
		HRESULT isOut([out,retval]VARIANT_BOOL* pValue);
		HRESULT isRetval([out,retval]VARIANT_BOOL* pValue);
		HRESULT isOptional([out, retval] VARIANT_BOOL *pVAlue);
		HRESULT getDefaultValue([out,retval] VARIANT* pValue);
		HRESULT isLCID([out, retval] VARIANT_BOOL *pVAlue);
	};

	[
		object,
		uuid(C99EBD48-0DF6-453d-94A8-BC004F69330F),
		helpstring("Enum declaration"),
		pointer_default(unique)
	]
	interface IEnumDecl : ITypeDecl
	{
		[helpstring("Get the number of enum constants")]
		HRESULT countConstants([out,retval] int* pNum );

		[helpstring("Get the enum constant")]
		HRESULT getConstant( int index, [out,retval]IConstant** ppConstant );
	};

	[
		object,
		uuid(579779F8-E889-43cc-9C07-F412A5374970),
		helpstring("Enum constant declaration"),
		pointer_default(unique)
	]
	interface IConstant : IUnknown {
		[helpstring("name of the constant")]
		HRESULT getName([out,retval]BSTR* pName);

		[helpstring("type of the constant. types should be identical among enum constants.")]
		HRESULT getType([out,retval]IType** ppType);

		[helpstring("numeric value of this constant.")]
		HRESULT getValue([out,retval]int* pValue);

		HRESULT getHelpString([out,retval] BSTR* pHelpString);
	};

	[
		object,
		uuid(A2F511E4-CC26-4337-A4F4-EA992190D082),
		helpstring("CoClass declaration"),
		pointer_default(unique)
	]
	interface ICoClassDecl : ITypeDecl
	{
		[helpstring("count the number of the interfaces implemented by this co-class")]
		HRESULT countImplementedInterfaces([out,retval] int* pValue);

		[helpstring("gets an interface implemented by this co-class")]
		HRESULT getImplementedInterface(int index, [out,retval] IImplementedInterfaceDecl** ppType );

		[helpstring("checks if this co-class is creatable")]
		HRESULT isCreatable([out,retval] VARIANT_BOOL* pOut);

		[helpstring("gets the CLSID of this co-class")]
		HRESULT getGUID([out,retval] GUID* pValue);
	};

	[
		object,
		uuid(9F6412CF-9B35-4b72-A8B9-AF83491E5B73),
		helpstring("interface implemented by a co-class"),
		pointer_default(unique)
	]
	interface IImplementedInterfaceDecl : IUnknown
	{
		[helpstring("is this the default source/sink?")]
		HRESULT isDefault([out,retval] VARIANT_BOOL* pValue);

		[helpstring("is this a sink?")]
		HRESULT isSource([out,retval] VARIANT_BOOL* pValue);

		[helpstring("is restricted?")]
		HRESULT isRestricted([out,retval] VARIANT_BOOL* pValue);

		[helpstring("gets the definition of the interface")]
		HRESULT getType([out,retval] ITypeDecl** ppType );
	};

	[
		uuid(43863047-F4CF-4309-BCE6-7C7E2B11EE28),
		helpstring("_ITestObjectEvents Interface")
	]
	dispinterface _ITestObjectEvents
	{
		properties:
		methods:
	};

	[
		object,
		uuid(55167E25-E6D1-4672-86C8-242AE001B7AB),
		dual,
		nonextensible,
		helpstring("ITestObject Interface"),
		pointer_default(unique)
	]
	interface ITestObject : IDispatch{
		[id(1), helpstring("moves v2 to v3, then v1 to v2.")]
		HRESULT TestVariant([in] VARIANT v1, [in,out] VARIANT* v2, [out,retval] VARIANT* v3);
		[id(2), helpstring("Can tlbimp handle wchar_t**?")]
		HRESULT outByteBuf([in] BSTR bstrEncodedData, [out] long* plSize, [out] unsigned char** ppbData);
		[id(3), helpstring("Passing in an interface pointer")]
		HRESULT echoInterface([in] IUnknown* arg, [out,retval] IUnknown** result);
		[id(4), helpstring("Make sure ULONGLONG conversion works")]
		HRESULT testUI8Conv([in] VARIANT* pIn, [out,retval] VARIANT* ret);
		[id(5), helpstring("Make sure unsigned byte conversion works")]
		HRESULT testUI1Conv([in] VARIANT* pIn, [out,retval] VARIANT* ret);
		[id(6), helpstring("currency")]
		HRESULT testCurrency([in]CURRENCY* in1, [in] CURRENCY in2, [out,retval] CURRENCY* out);
		[id(7), helpstring("test 64bit int conversion")]
		HRESULT testInt64([in]__int64 x, [out,retval]__int64* y);
	};

	[
		uuid(E069E52A-704B-42DC-BF03-CE5C14C3B7B3),
		helpstring("for testing com4j")
	]
	coclass TestObject
	{
		[default] interface ITestObject;
		[default, source] dispinterface _ITestObjectEvents;
	};
};
